// stores the tetris game. does everything but handling keypresses and what to do when the
// game fails
class Game {
	field int tileSize; // the size of each tile
	field int startingX, startingY; // the top-left corner of the grid

	// the columns of the field that contains all the blocks
	field Array col1, col2, col3, col4, col5, col6, col7, col8, col9, col10; 

	// the number of frames until down default, which is not affected by the down key
	field int framesUntilDownDefault;

	// the number of frames until down normally, which is affected by the down key
	field int framesUntilDown;

	// handles the number of frames until the next down that decrements every frame
	field int framesUntilDownCurrent;

	constructor Game new(int tileSizeArg) {
		// assign tileSize
		let tileSize = tileSizeArg;

		// the starting x is placed so that the grid is centered in the middle. the board
		// width is 10 so the starting x has to be 5 tileSizes away from the game
		let startingX = 256 - (tileSize*5);

		// the starting y is the tileSize
		let startingY = tileSize;

		// the number of frames until the next moveDown starts at 70
		let framesUntilDownDefault = 70;
		let framesUntilDown = 70;
		let framesUntilDownCurrent = 70;

		return this;
	}

	// displays all parts of the game and handles moving down every few frames
	method void display() {
		// black background
		do Screen.setColor(true);
		do Screen.drawRectangle(0, 0, 511, 255);

		// outline of the grid: displays a little bit over where it's supposed to start at,
		// 206, 10, to a little bit over where it's supposed to end at, 306, 210. note that
		// this will be moved to Game very soon and it will be more explanable
		do Screen.setColor(false);
		do Screen.drawRectangle(201, 5, 311, 215);

		// now we display the actual grid
		do Screen.setColor(true);
		do Screen.drawRectangle(206, 10, 306, 210);

		return;
	}
}

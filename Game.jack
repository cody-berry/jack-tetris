// stores the tetris game. does everything but handling keypresses and what to do when the
// game fails
class Game {
	field int tileSize; // the size of each tile
	field int startingX, startingY; // the top-left corner of the grid

	// the columns of the field that contains all the blocks. note that we can't
	// use nested arrays because we can't do something like:
	// let playingField[0][0] = 1;
	// due to lack of nested arrays. we use 10 columns because a standard Tetris
	// game is a 10x20 grid
	field Array col1, col2, col3, col4, col5, col6, col7, col8, col9, col10; 

	// the number of frames until the next down default
	field int framesUntilDownDefault;

	// the number of frames until the next moveDown()
	field int framesUntilDown;

	// handles all the pieces
	field Array piecesList;

	// handles the next piece index. is incremented on every display. 
	field int nextPieceIndex;

	// handles the current piece itself.
	field Array currentPiece;

	// holds the current piece position
	field int currentPiecePosX, currentPiecePosY;

	constructor Game new(int tileSizeArg) {
		var int i;
		var Array iBlock, jBlock, lBlock, sBlock, zBlock, oBlock, tBlock;
		var Array iBlock1, iBlock2, iBlock3, iBlock4;
		var Array jBlock1, jBlock2, jBlock3, jBlock4;
		var Array lBlock1, lBlock2, lBlock3, lBlock4;
		var Array sBlock1, sBlock2, sBlock3, sBlock4;
		var Array zBlock1, zBlock2, zBlock3, zBlock4;
		var Array oBlock1, oBlock2, oBlock3, oBlock4;
		var Array tBlock1, tBlock2, tBlock3, tBlock4;

		// assign tileSize
		let tileSize = tileSizeArg;

		// the starting x is placed so that the grid is centered in the middle. the board
		// width is 10 so the starting x has to be 5 tileSizes away from the game
		let startingX = 256 - (tileSize*5);

		// the starting y is the tileSize
		let startingY = tileSize;

		// the number of frames until the next moveDown starts at 20
		let framesUntilDownDefault = 20;
		let framesUntilDown = 20;

		// initialize the playing field
		let col1 = Array.new(20);
		let col2 = Array.new(20);
		let col3 = Array.new(20);
		let col4 = Array.new(20);
		let col5 = Array.new(20);
		let col6 = Array.new(20);
		let col7 = Array.new(20);
		let col8 = Array.new(20);
		let col9 = Array.new(20);
		let col10 = Array.new(20);

		// now set each cell to 0
		let i = 0;
		while (i < 10) {
			let col1[i] = 0;
			let col2[i] = 0;
			let col3[i] = 0;
			let col4[i] = 0;
			let col5[i] = 0;
			let col6[i] = 0;
			let col7[i] = 0;
			let col8[i] = 0;
			let col9[i] = 0;
			let col10[i] = 0;
			let i = i + 1;
		}

		let piecesList = Array.new(7);

		// nested arrays here are fine because we're not setting parts of it. we're
		// just iterating through it. note that it's tedious becaus we have to set
		// each part of the array.
		let iBlock = Array.new(4);
		let lBlock = Array.new(4);
		let jBlock = Array.new(4);
		let sBlock = Array.new(4);
		let zBlock = Array.new(4);
		let oBlock = Array.new(4);
		let tBlock = Array.new(4);

		// {piece}Block{num} means the x and y diff between the center
		// of the piece and the {num}ᵗʰ block of {piece}.
		let iBlock1 = Array.new(2);
		let iBlock2 = Array.new(2);
		let iBlock3 = Array.new(2);
		let iBlock4 = Array.new(2);

		let lBlock1 = Array.new(2);
		let lBlock2 = Array.new(2);
		let lBlock3 = Array.new(2);
		let lBlock4 = Array.new(2);

		let jBlock1 = Array.new(2);
		let jBlock2 = Array.new(2);
		let jBlock3 = Array.new(2);
		let jBlock4 = Array.new(2);

		let sBlock1 = Array.new(2);
		let sBlock2 = Array.new(2);
		let sBlock3 = Array.new(2);
		let sBlock4 = Array.new(2);

		let zBlock1 = Array.new(2);
		let zBlock2 = Array.new(2);
		let zBlock3 = Array.new(2);
		let zBlock4 = Array.new(2);

		let oBlock1 = Array.new(2);
		let oBlock2 = Array.new(2);
		let oBlock3 = Array.new(2);
		let oBlock4 = Array.new(2);

		let tBlock1 = Array.new(2);
		let tBlock2 = Array.new(2);
		let tBlock3 = Array.new(2);
		let tBlock4 = Array.new(2);

		let iBlock1[0] = -1;
		let iBlock1[1] = 0;
		let iBlock2[0] = 0;
		let iBlock2[1] = 0;
		let iBlock3[0] = 1;
		let iBlock3[1] = 0;
		let iBlock4[0] = 2;
		let iBlock4[1] = 0;
		let lBlock1[0] = -1;
		let lBlock1[1] = -1;
		let lBlock2[0] = 0;
		let lBlock2[1] = -1;
		let lBlock3[0] = 1;
		let lBlock3[1] = -1;
		let lBlock4[0] = 1;
		let lBlock4[1] = 0;
		let jBlock1[0] = -1;
		let jBlock1[1] = 0;
		let jBlock2[0] = -1;
		let jBlock2[1] = -1;
		let jBlock3[0] = 0;
		let jBlock3[1] = -1;
		let jBlock4[0] = 1;
		let jBlock4[1] = -1;
		let sBlock1[0] = -1;
		let sBlock1[1] = 0;
		let sBlock2[0] = 0;
		let sBlock2[1] = 0;
		let sBlock3[0] = 0;
		let sBlock3[1] = 1;
		let sBlock4[0] = 1;
		let sBlock4[1] = 1;
		let zBlock1[0] = -1;
		let zBlock1[1] = 1;
		let zBlock2[0] = 0;
		let zBlock2[1] = 1;
		let zBlock3[0] = 0;
		let zBlock3[1] = 0;
		let zBlock4[0] = 1;
		let zBlock4[1] = 0;
		let oBlock1[0] = -1;
		let oBlock1[1] = 0;
		let oBlock2[0] = -1;
		let oBlock2[1] = 1;
		let oBlock3[0] = 0;
		let oBlock3[1] = 0;
		let oBlock4[0] = 0;
		let oBlock4[1] = 1;
		let tBlock1[0] = -1;
		let tBlock1[1] = 0;
		let tBlock2[0] = 0;
		let tBlock2[1] = 0;
		let tBlock3[0] = 0;
		let tBlock3[1] = 1;
		let tBlock4[0] = 1;
		let tBlock4[1] = 0;

		let iBlock[0] = iBlock1;
		let iBlock[1] = iBlock2;
		let iBlock[2] = iBlock3;
		let iBlock[3] = iBlock4;
		let lBlock[0] = lBlock1;
		let lBlock[1] = lBlock2;
		let lBlock[2] = lBlock3;
		let lBlock[3] = lBlock4;
		let jBlock[0] = jBlock1;
		let jBlock[1] = jBlock2;
		let jBlock[2] = jBlock3;
		let jBlock[3] = jBlock4;
		let sBlock[0] = sBlock1;
		let sBlock[1] = sBlock2;
		let sBlock[2] = sBlock3;
		let sBlock[3] = sBlock4;
		let zBlock[0] = zBlock1;
		let zBlock[1] = zBlock2;
		let zBlock[2] = zBlock3;
		let zBlock[3] = zBlock4;
		let oBlock[0] = oBlock1;
		let oBlock[1] = oBlock2;
		let oBlock[2] = oBlock3;
		let oBlock[3] = oBlock4;
		let tBlock[0] = tBlock1;
		let tBlock[1] = tBlock2;
		let tBlock[2] = tBlock3;
		let tBlock[3] = tBlock4;

		let piecesList[0] = iBlock;
		let piecesList[1] = lBlock;
		let piecesList[2] = jBlock;
		let piecesList[3] = sBlock;
		let piecesList[4] = zBlock;
		let piecesList[5] = oBlock;
		let piecesList[6] = tBlock;

		let currentPiece = piecesList[0];

		let currentPiecePosX = 4;

		let currentPiecePosY = 1;

		return this;
	}

	// checks each line and makes sure it's not full.
	method void checkLines() {
		var int row;
		let row = 19;
		// iterate through each row backwards.
		while (row > -1) {
			// if the line is full, clear it. 
			if (col1[row] & 
				col2[row] & 
				col3[row] & 
				col4[row] & 
				col5[row] & 
				col6[row] & 
				col7[row] & 
				col8[row] & 
				col9[row] & 
				col10[row]) {
				let col1[row] = 0;
				let col2[row] = 0;
				let col3[row] = 0;
				let col4[row] = 0;
				let col5[row] = 0;
				let col6[row] = 0;
				let col7[row] = 0;
				let col8[row] = 0;
				let col9[row] = 0;
				let col10[row] = 0;
			}
			let row = row - 1;
		}
		return;
	}

	// displays all parts of the game and handles moving down every few frames
	method void display() {
		var int row;

		// check the lines
		do checkLines();

		// black background
		do Screen.setColor(true);
		do Screen.drawRectangle(0, 0, 511, 255);

		// outline of the grid: displays a little bit over where it's supposed to start at,
		// startingX, startingY, to a little bit over that, with more tileSizes and a 
		// padding of 5. 
		do Screen.setColor(false);
		do Screen.drawRectangle(startingX - 5, startingY - 5, startingX + (10*tileSize) + 5, 
			                    startingY + 5 + (20*tileSize));

		// now we display the actual grid
		do Screen.setColor(true);
		do Screen.drawRectangle(startingX, startingY, startingX + (10*tileSize), 
			                    startingY + (20*tileSize));

		// define the row that we're on
		let row = 0;

		// since we're displaying white cells, we set the color to white
		do Screen.setColor(false);

		// iterate through each row, which is basically each cell because there are 
		// individual columns already defined due to lack of nested arrays in Jack
		while (row < 20) {
			if (col1[row] = 0) { // display a white cell if the cell isn't already taken
				do Screen.drawRectangle(startingX + (0*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (0*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col2[row] = 0) { // repeat for the rest, except 1 tileSize to the right
				do Screen.drawRectangle(startingX + (1*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (1*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col3[row] = 0) { 
				do Screen.drawRectangle(startingX + (2*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (2*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col4[row] = 0) { 
				do Screen.drawRectangle(startingX + (3*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (3*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col5[row] = 0) { 
				do Screen.drawRectangle(startingX + (4*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (4*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col6[row] = 0) { 
				do Screen.drawRectangle(startingX + (5*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (5*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col7[row] = 0) { 
				do Screen.drawRectangle(startingX + (6*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (6*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col8[row] = 0) {
				do Screen.drawRectangle(startingX + (7*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (7*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col9[row] = 0) {
				do Screen.drawRectangle(startingX + (8*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (8*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}
			if (col10[row] = 0) {
				do Screen.drawRectangle(startingX + (9*tileSize) + 1, startingY + (tileSize*row) + 1, startingX + tileSize + (9*tileSize) - 1, startingY + tileSize + (tileSize*row) - 1);
			}

			// increment the row
			let row = row + 1;
		}

		return;
	}

	// moves current piece down by one tile
	method void moveDown() {
		let currentPiecePosY = currentPiecePosY + 1;

		// but this time, if it fails, then we set the piece in place in addition to
		// fixing it
		if (~(checkBorders())) {
			let currentPiecePosY = currentPiecePosY - 1;
			do setInPlace();
		}
		return;
	}

	// sets the current piece in place
	method void setInPlace() {
		// variable definition
		var Array currentOffset, colToSelect;
		var int i, xPos, yPos;

		// move down all the way
		while (checkBorders()) {
			let currentPiecePosY = currentPiecePosY + 1;
		}

		// since after the loop, we're one more down than we can be, we have to adjust up
		let currentPiecePosY = currentPiecePosY - 1;

		// iterate through every offset in the list (there are 4)
		let i = 0;
		while (i < 4) {
			// set currentOffset to the current offset we're checking
			let currentOffset = currentPiece[i];

			// read displayCurrentFigure for documentation
			let xPos = currentPiecePosX + currentOffset[0];

			let yPos = currentPiecePosY + currentOffset[1];

			// set it into the playing field list!
			// but we have to figure out which column to select. read
			// checkBorders for documentation.
			if (xPos = 0) {
				let colToSelect = col1;
			}
			if (xPos = 1) {
				let colToSelect = col2;
			}
			if (xPos = 2) {
				let colToSelect = col3;
			}
			if (xPos = 3) {
				let colToSelect = col4;
			}
			if (xPos = 4) {
				let colToSelect = col5;
			}
			if (xPos = 5) {
				let colToSelect = col6;
			}
			if (xPos = 6) {
				let colToSelect = col7;
			}
			if (xPos = 7) {
				let colToSelect = col8;
			}
			if (xPos = 8) {
				let colToSelect = col9;
			}
			if (xPos = 9) {
				let colToSelect = col10;
			}

			// now we're actually setting the block
			let colToSelect[yPos] = -1;


			let i = i + 1;
		}

		// reset the current position to 4, 1
		let currentPiecePosX = 4;
		let currentPiecePosY = 1;

		// display the game
		do display();
		do displayCurrentFigure();

		let currentPiece = piecesList[nextPieceIndex];
		let nextPieceIndex = 0;

		return;
	}

	// draw the current figure
	method void displayCurrentFigure() {
		var int i, xPos, yPos;
		var Array currentOffset;

		// iterate through every offset in the list
		let i = 0;

		// we're drawing black now
		do Screen.setColor(true);

		while (i < 4) {
			// for every offset, display it
			let currentOffset = currentPiece[i];

			// calculate the x position, the current piece x center plus the offset
			let xPos = currentPiecePosX + currentOffset[0];

			// calculate the y position, the current piece y center plus the offset
			let yPos = currentPiecePosY + currentOffset[1];

			// display it!
			do Screen.drawRectangle(
				// the starting x position plus the tileSize times the xPos. note that it is 0-indexed
				startingX + (xPos*tileSize), 
				// same for y
				startingY + (yPos*tileSize),
				// now this time we repeat but one tileSize more
				startingX + (xPos*tileSize) + tileSize,
				startingY + (yPos*tileSize) + tileSize
				);

			let i = i + 1;
		}

		let framesUntilDown = framesUntilDown - 1;

		if (framesUntilDown < 0) {
			let framesUntilDown = framesUntilDownDefault;
			do eraseCurrentFigure();
			do moveDown();
			do displayCurrentFigure();
		}

		let nextPieceIndex = nextPieceIndex + 1;
		if (nextPieceIndex = 7) {
			let nextPieceIndex = 0;
		}

		return;
	}

	// erase the current figure
	method void eraseCurrentFigure() {
		var int i, xPos, yPos;
		var Array currentOffset;

		// iterate through every offset in the list
		let i = 0;

		// we're drawing white now
		do Screen.setColor(false);

		while (i < 4) {
			// for every offset, display it
			let currentOffset = currentPiece[i];

			// calculate the x position, the current piece x center plus the offset
			let xPos = currentPiecePosX + currentOffset[0];

			// calculate the y position, the current piece y center plus the offset
			let yPos = currentPiecePosY + currentOffset[1];

			// display it!
			do Screen.drawRectangle(
				// the starting x position plus the tileSize times the xPos. note that it is 0-indexed
				startingX + (xPos*tileSize) + 1, 
				// same for y
				startingY + (yPos*tileSize) + 1,
				// now this time we repeat but one tileSize more
				startingX + (xPos*tileSize) + tileSize - 1,
				startingY + (yPos*tileSize) + tileSize - 1
				);

			let i = i + 1;
		}
		return;
	}

	// move the current figure left
	method void moveLeft() {
		let currentPiecePosX = currentPiecePosX - 1;
		if (~(checkBorders())) {
			let currentPiecePosX = currentPiecePosX + 1;
		}
		return;
	}

	// move the current figure right
	method void moveRight() {
		let currentPiecePosX = currentPiecePosX + 1;
		if (~(checkBorders())) {
			let currentPiecePosX = currentPiecePosX - 1;
		}
		return;
	}

	// checks the borders. returns true of the piece is valid, false if not. a piece is
	// valid if it is not beyond the edges of the playing field or intersects with one
	// of the pieces of the playing field.
	method boolean checkBorders() {
		var Array currentOffset;
		var int i, xPos, yPos;
		var Array colToCheck;

		let i = 0;
		while (i < 4) {
			let currentOffset = currentPiece[i];

			// calculate the xPos and yPos as in displayCurrentFigure
			let xPos = currentPiecePosX + currentOffset[0];

			let yPos = currentPiecePosY + currentOffset[1];

			// check if the xPos is too much to the left or right, if 
			// that does happen, move in the opposite direction.
			if (xPos < 0) {
				let currentPiecePosX = currentPiecePosX + 1;
				let xPos = xPos + 1;
				return checkBorders();
			}

			if (xPos > 9) {
				let currentPiecePosX = currentPiecePosX - 1;
				let xPos = xPos - 1;
				return checkBorders();
			}

			// if yPos is too much down, then return false. 
			if (yPos > 19) {
				return false;
			}

			// if none of those errors are there, then we check the
			// playing field. but we first have to check which column
			// we're checking.
			if (xPos = 0) {
				let colToCheck = col1;
			}
			if (xPos = 1) {
				let colToCheck = col2;
			}
			if (xPos = 2) {
				let colToCheck = col3;
			}
			if (xPos = 3) {
				let colToCheck = col4;
			}
			if (xPos = 4) {
				let colToCheck = col5;
			}
			if (xPos = 5) {
				let colToCheck = col6;
			}
			if (xPos = 6) {
				let colToCheck = col7;
			}
			if (xPos = 7) {
				let colToCheck = col8;
			}
			if (xPos = 8) {
				let colToCheck = col9;
			}
			if (xPos = 9) {
				let colToCheck = col10;
			}

			// now we're actually checking the column
			if (colToCheck[yPos]) {
				return false;
			}


			let i = i + 1;
		}

		return true;
	}
}
